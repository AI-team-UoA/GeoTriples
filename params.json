{"name":"GeoTriples","tagline":" Publishing geospatial data as Linked Open Geospatial Data ","body":"# GeoTriples\r\n Publishing geospatial data as Linked Open Geospatial Data \r\n\r\n## Quickstart##\r\nAssuming git, [Maven](http://maven.apache.org/download.cgi) and [Java](https://www.java.com/en/download/) installed:\r\n```bash\r\n$ git clone https://github.com/LinkedEOData/GeoTriples.git\r\n$ cd GeoTriples\r\n$ mvn package\r\n$ java -jar target/geotriples-<version>-cmd.jar [Options] [Argument]\r\n\r\n[Optional: Add an alias for executing the jar file with command `geotriples-cmd`]\r\n$ echo \"alias geotriples-cmd='java -jar `pwd`/target/geotriples-<version>-cmd.jar'\" >> ~/.bashrc\r\n```\r\n\r\n### GeoTriples Modes ###\r\nGeoTriples consists of three modules. The Mapping Generator which automatically produces an R2RML/RML mapping file according to the input source's schema, the R2RML/RML processor which processes an R2RML/RML mapping and generates an RDF graph, and finally the Ontology Based Data Access (OBDA) module that evaluates stSPARQL/GeoSPARQL queries over a relational database.\r\n\r\n#### Automatic generation of R2RML/RML mappings ####\r\n- Relational Database \r\n```bash\r\n$ geotriples-cmd generate_mapping -b baseURI [-u user] [-p password] [-d driver] [-o mappingFile] [-rml] jdbcURL\r\n```\r\n- Shapefile\r\n```bash\r\n$ geotriples-cmd generate_mapping -b baseURI [-o mappingFile] [-rml] fileURL\r\n```\r\n- XML files (Only RML mappings)\r\n```bash\r\n$ geotriples-cmd generate_mapping -b baseURI [-o RMLmappingFile] [-rp rootpath] [-r rootelement] [-onlyns namespace] [-ns namespaces] [-x XSDfile] fileURL\r\n```\r\n\r\n#### Transformation into RDF ####\r\n- Relational Database\r\n```bash\r\n$ geotriples-cmd dump_rdf [-rml] [-f format] [-b baseURI] [-o rdfoutfile]  -u user -p password -d driver -j jdbcURL inputmappingfile\r\n```\r\n- Shapefile\r\n```bash\r\n$ geotriples-cmd dump_rdf [-rml] [-f format] [-b baseURI] [-o rdfoutfile] [-s epsgcode] [-sh fileURL] inputmappingfile\r\n```\r\n- XML/JSON (using RML processor)\r\n```bash\r\n$ geotriples-cmd dump_rdf  -rml [-f format] [-b baseURI] [-o rdfoutfile] [-s epsgcode] inputRMLmappingfile\r\n```\r\n\r\n### GeoTriples Architecture ###\r\nGeoTriples comprises three main\r\ncomponents: the mapping generator, R2RML/RML processor and the [ontop-spatial](https://github.com/ConstantB/ontop-spatial) OBDA evaluator. The mapping\r\ngenerator takes as input a data source and creates automatically an R2RML or RML\r\nmapping that transforms it into an RDF graph. The generated mapping is\r\nenriched with subject and predicate-object maps, in order to take into account\r\nthe specifities of geospatial data and cater for all transformations that are\r\nneeded to produce an RDF graph that is compliant with the GeoSPARQL\r\nvocabulary. To accomplish this task, we extend R2RML mappings to allow\r\nthe representation of a transformation function over input data. Afterwards,\r\nthe user may edit the generated R2RML mapping document to comply with\r\nher requirements (e.g., use a different vocabulary).\r\n\r\n![Architecture](http://drive.google.com/uc?export=view&id=0ByyHFR-5IXfpdHhWOERNNUxsNVE \"The architecture of GeoTriples\")\r\n\r\n### RML Processor ###\r\nGeoTriples now supports the [RML](http://rml.io/) mapping language by extending the [RML processor](https://github.com/mmlab/RMLProcessor) to address the spatial information.\r\n[RML](http://rml.io/) is a mapping language, very similar to [R2RML](http://www.w3.org/TR/r2rml/). The main difference is that RML is designed to allow the process of data that *do not necessarily* rely in tables and thus not having an explicit iteration pattern.\r\n\r\nFor example, the farms.xml (see below) cannot be iterated in per row fashion, because it has nested elements.\r\n```xml\r\n<Farm>\r\n   <Field id=\"1\">\r\n      <Vigor>4</Vigor>\r\n      <Farmer>John Vl</Farmer>\r\n      <Geometry>\r\n       <gml:Polygon>\r\n         <gml:outerBoundaryIs>\r\n           <gml:LinearRing> \r\n             <gml:posList>0,0 100,0 100,100 0,100 0,0</gml:posList> \r\n           </gml:LinearRing>\r\n         </gml:outerBoundaryIs>\r\n       </gml:Polygon>\r\n      </Geometry>\r\n   </Field>\r\n   <Field id=\"2\">\r\n      <Vigor>1</Vigor>\r\n      <Farmer>Harper Lee</Farmer>\r\n      <Geometry id=1>\r\n       <gml:Polygon>\r\n         <gml:outerBoundaryIs>\r\n           <gml:LinearRing> \r\n             <gml:posList>100,100 200,100 200,200 100,200 100,100</gml:posList>\r\n           </gml:LinearRing>\r\n         </gml:outerBoundaryIs>\r\n       </gml:Polygon>\r\n      </Geometry>\r\n   </Field>\r\n   <Field id=\"3\">\r\n      <Vigor>3</Vigor>\r\n      <Farmer>Bruce Pom</Farmer>\r\n   </Field>\r\n</Farm>\r\n```\r\n\r\nR2RML uses the property <code>rr:tableName</code> to define which table from the input file or the relational database it going to be used as the source table for the mappings. RML has the equivalent <code>rml:source</code> to define the source for the mappings. The source can be a JDBC URL for a relational database, a Shapefile, an XML, JSON or CSV file. \r\nThe iterator property <code>rml:iterator</code> defines the iterating pattern in order to process non-relational structured files. For the above example the iterator should be an XPath query.\r\n\r\n<p>An example RML mapping can be the following</p>\r\n```\r\n<#Field>\r\n\trml:logicalSource [\r\n\t rml:source \"/fields.xml\";\r\n\t rml:referenceFormulation ql:XPath;\r\n\t rml:iterator \"/Farm/Field\"];\r\n\t\r\n\trr:subjectMap [ \r\n\t rr:class ont:Farm; \r\n\t rr:class ogc:Feature;\r\n\t rr:template \"http://data.linkedeodata.eu/Field/id/{@id}\"];\r\n\t\r\n\trr:predicateObjectMap [ \r\n\t rr:predicate ont:hasVigor; \r\n\t rr:objectMap [\r\n\t   rml:reference \"Vigor\"]];\r\n\t\r\n\trr:predicateObjectMap [ \r\n\t rr:predicate ont:hasFarmer;\r\n\t rr:objectMap [ \r\n\t   rml:reference \"Farmer\"]].\r\n\t   \r\n\trr:predicateObjectMap [ \r\n\t rr:predicate ogc:hasGeometry;\r\n\t rr:objectMap [ \r\n\t   rr:template \"http://data.linkedeodata.eu/FieldGeometry/id/{Geometry/@id}\"]].\r\n\r\n<#FieldGeometry>\r\n\trml:logicalSource [\r\n\t rml:source \"/fields.xml\";\r\n\t rml:referenceFormulation ql:XPath;\r\n\t rml:iterator \"/Farm/Field/Geometry\"];\r\n\t\r\n\trr:subjectMap [ \r\n\t rr:class ont:FieldGeometry; \r\n\t rr:class ogc:Geometry\r\n\t rr:template \"http://data.linkedeodata.eu/FieldGeometry/id/{@id}\"];\r\n\t\r\n\trr:predicateObjectMap [ \r\n\t rr:predicate ogc:dimension; \r\n\t rr:objectMap [\r\n\t   rrx:function rrxf:dimension;\r\n\t   rrx:argumentMap ([rml:reference \"*\"]) ];\r\n\t\r\n\trr:predicateObjectMap [ \r\n\t rr:predicate ogc:asWKT; \r\n\t rr:objectMap [\r\n\t   rrx:function rrxf:asWKT;\r\n\t   rrx:argumentMap ([rml:reference \"*\"]) ].\r\n```\r\n\r\nThis mapping contains two triples maps: <#Field> and <#FieldGeometry>. Both triples maps uses an XPath iterator, denoted by `rml:referenceFormulation`, as the base iterator pattern that will be used by the mapping processor module for the generation of the graph. The `rml:reference` is used instead of `rr:column` R2RML's property . The value of `rml:reference` property extends the iterator in order to point at an element.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}